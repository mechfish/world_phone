<?php
// $Id$

/**
 * @file
 * Defines international phone number fields for CCK.
 */

// longest allowed length for a user-entered phone number
define('WORLD_PHONE_MAXLENGTH', 64);

/**
 * Implementation of hook_menu().
 */
function world_phone_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'title' => t('World Phone'),      
      'path' => 'admin/settings/world_phone',
      'callback' => 'drupal_get_form',
      'callback arguments' => array('world_phone_admin_settings'),
      'access' => user_access('administer site configuration'),
      'description' => t('Configuration of the World Phone number module.'),
    );
  }
  return $items;
}

/**
 * FAPI definition for the admin settings form.
 *
 * @ingroup forms
 */
function world_phone_admin_settings() {
  $form = array(
    'site_country' => array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#title' => t('Site Settings'),
    ),
    'user_country' => array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#title' => t('User Settings'),
      '#description' => t('We can use a field in a user\'s profile to determine that user\'s home country. ' .
                          'This will make it easier for a user to enter domestic phone numbers.'),
    ),
  );
  $form['site_country']['world_phone_default_country_code'] = array(
    '#type' => 'select',
    '#title' => t('Site\'s Home Country'),
    '#description' => t('This country code will be assigned to all phone numbers which ' . 
                        'do not specify country codes.'),
    '#options' => _world_phone_country_list_for_select(),
    '#default_value' => variable_get('world_phone_default_country_code', '1'),
  );
  $form['site_country']['world_phone_country_policy'] = array(
    '#type' => 'radios',
    '#title' => t('Country Code Policy'),
    '#options' => array(
      'use_site_default' => t('Assume that numbers entered without a country code are in this site\'s home country.'),
      'require' => t('Users must explicitly select a country code for every number they enter.'),
    ),
    '#default_value' => variable_get('world_phone_country_policy', 'use_site_default'),
  );

  $profile_fields = array();
  if (module_exists('profile')) {
    $result = db_query("SELECT title, name, type, category, fid FROM {profile_fields} WHERE type = 'textfield' ORDER BY title");    
    while ($field = db_fetch_object($result)) {
      $profile_fields[$field->name] = check_plain($field->title);
    }
  }
  $profile_fields = array('-1' => t('User cannot specify a default country.')) + $profile_fields;
  $form['user_country']['world_phone_user_country_field'] = array(
    '#type' => 'select',
    '#title' => t('Country Profile Field'),
    '#description' => t('Use this field from a user\'s profile to determine the user\'s home country.'),
    '#options' => $profile_fields,
    '#default_value' => variable_get('world_phone_user_country_field', '-1'),
  );
  if (! module_exists('profile')) {
    $form['user_country']['world_phone_user_country_field']['#description'] = t('To use this feature, you must first enable the Profile module.');
  }
  $form['user_country']['world_phone_user_country_field_type'] = array(
    '#type' => 'radios',
    '#title' => t('Country Profile Field Type'),
    '#options' => array(
      'phone' => t('A phone number with country code prefix, stored as text'),
      'abbrev' => t('A standard two-letter abbreviation for a country (ISO 3166-1 alpha-2)'),
    ),
    '#description' => t('How shall this module interpret the contents of the Country Profile Field?'),
    '#default_value' => variable_get('world_phone_user_country_field_type', 'phone'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_simpletest().
 *
 * This isn't really being used in the Drupal 5 version. I put it here in a
 * burst of optimism before I discovered that Drupal 5 testing is kind of
 * painful. I'm leaving it here, commented out, in preparation for the port to Drupal 6.
 */
/*
function hook_simpletest() {
  $dir = drupal_get_path('module', 'world_phone') . '/tests';
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}
*/

/**
 * Implementation of hook_field_info().
 */
function world_phone_field_info() {
  return array(
    'world_phone' => array('label' => t('World Phone Number')),
   );
}

/**
 * Implementation of hook_field_settings().
 */
function world_phone_field_settings($op, $field) {
  switch ($op) { 
    case 'database columns':
      return array(
        'country_code' => array('type' => 'varchar', 'length' => 8, 'default' => "''", 'sortable' => TRUE),
        'value' => array('type' => 'varchar', 'length' => WORLD_PHONE_MAXLENGTH, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
      );
      
    case 'filters':
      return array();
  }
}

/**
 * Implementation of hook_field().
 */
function world_phone_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      // the widget is responsible for validating the contents of this field.
      // TODO - we want to support programmatic saving of fields, so implement validation here instead.
      break;

    case 'submit':
      foreach ($items as $delta => $item) {
        $ccode = _world_phone_determine_country_code($item['value'], $item['country_code']);
        $items[$delta]['country_code'] = $ccode['value'];
      }
      break;
  }
}

/**
 *Implementation of hook_field_formatter_info
 */
function world_phone_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'Phone number, w/country code if outside site\'s country.',
      'field types' => array('world_phone'),
    ),
    'with_country' => array(
      'label' => 'Phone number w/country code',
      'field types' => array('world_phone'),
    ),
    'without_country' => array(
      'label' => 'Phone number without country code',
      'field types' => array('world_phone'),
    ),
    'dialable' => array(
      'label' => 'Phone number in dialable format',
      'field types' => array('world_phone'),
    ),
  );
 } 
 
define('WORLD_PHONE_FORMAT_FOREIGN_COUNTRY_ONLY', 0);
define('WORLD_PHONE_FORMAT_WITHOUT_COUNTRY', 1);
define('WORLD_PHONE_FORMAT_WITH_COUNTRY', 2);

/**
 * Implementation of hook_field_formatter().
 */
function world_phone_field_formatter($field, $item, $formatter, $node) {
  if (!isset($item['value'])) {
    return '';
  }
  $fmt = WORLD_PHONE_FORMAT_FOREIGN_COUNTRY_ONLY;
  switch ($formatter) {
    case 'with_country':
      $fmt = WORLD_PHONE_FORMAT_WITH_COUNTRY;
      break;
    case 'without_country':
      $fmt = WORLD_PHONE_FORMAT_WITHOUT_COUNTRY;
      break;
    case 'dialable':
      $formatted = world_phone_number_to_dial($item['value'], $item['country_code']);
      return theme('world_phone_dialable', $formatted, check_plain($item['value']), check_plain($item['country_code']));
    default:
      break;
  }
  $formatted = world_phone_format_number($item['value'], $item['country_code'], $fmt);
  return theme('world_phone', $formatted, check_plain($item['value']), check_plain($item['country_code']));
}

/**
 * Format a dialable phone number.
 *
 * @ingroup themeable
 */
function theme_world_phone_dialable($number, $orig_number, $ccode) {
  return '<span class="world-phone">' . $number . '</span>';
}

/**
 * Format a phone number for display.
 *
 * @ingroup themeable
 */
function theme_world_phone($number, $orig_number, $ccode) {
  return '<span class="world-phone">' . $number . '</span>';
}

/**
 * Implementation of hook_widget_info().
 */
function world_phone_widget_info() {
  return array(
    'world_phone' => array(
      'label' => t('World Phone Number'),
      'field types' => array('world_phone'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function world_phone_widget($op, &$node, $field, &$items) {
  global $user;
  switch ($op) {
    case 'prepare form values':
      // Determine the correct country for each phone number, and
      // remove the country code from the number portion if necessary.
      // Stash the intermediate results in 'default phones' or 'default phone',
      // depending on whether the field is single or multiple-valued.
      if ($field['multiple']) {
        $arr = array();
        foreach ($items as $item) {
          $arr[] = _world_phone_prepare_for_widget($field, $item);
        }
        $items['default phones'] = $arr;
      }
      elseif (isset($items[0]['value'])) {
        $items['default phone'] = _world_phone_prepare_for_widget($field, $items[0]);
      }
      break;

    case 'form':
      // return the form elements which make up the widget, filling them
      // with the default value(s) computed in 'prepare form values', above     
      $form = array();
      
      $form[$field['field_name']] = array('#tree' => TRUE);
      if ($field['multiple']) {
        $form[$field['field_name']]['#type'] = 'fieldset';
        $form[$field['field_name']]['#description'] = t($field['widget']['description']);
        $delta = 0;
        if (isset($items['default phones'])) {
          foreach ($items['default phones'] as $ph) {
            $form[$field['field_name']][$delta] = _world_phone_widget_item_form($field, $ph, 
                                                                                ($delta == 0) ? NULL : '',
                                                                                ($delta == 0) ? NULL : FALSE);
            $delta++;
          }        
        }
        // add some empty widgets in case the user wants to add more phone numbers
        foreach (range($delta, $delta + 2) as $delta) {
          $form[$field['field_name']][$delta] = _world_phone_widget_item_form($field, NULL,
                                                                              ($delta == 0) ? NULL : '',
                                                                              ($delta == 0) ? NULL : FALSE);
        }
      }
      else { // not multiple-valued
        $ph = $items['default phone'];
        $form[$field['field_name']][0] = _world_phone_widget_item_form($field, $ph);
        $form[$field['field_name']][0]['#description'] = t($field['widget']['description']);
      }
      return $form;
    
    case 'process form values':
      // remove any empty form items beyond the first
      foreach ($items as $delta => $item) {
        if ($item['value'] == '' && $delta > 0)  {
          unset($items[$delta]);
        }
      }      
      break;

    case 'validate':
      // invalid data will be caught during field validation
      break;      
  }                   
}

/**
 * world_phone_widget op 'prepare form values' -- helper function
 *
 * Determine the correct country for the phone number and remove the country code
 * from the text of the number.
 */
function _world_phone_prepare_for_widget($field, $data) {
  $num = $data['value'];
  $ccode = _world_phone_determine_country_code($data['value'], $data['country_code']);
  $num = _world_phone_number_remove_country_code($num);
  return array(
    'country_code' => $ccode['value'],
    'value' => $num,
  );
}

/**
 *  world_phone_widget op 'form' -- helper function
 *
 *  Return a world_phone_number custom form element for use in the widget.
 */
function _world_phone_widget_item_form($field, $phone, $title = NULL, $required = NULL) {
  $form = array(
    '#type' => 'world_phone_number',
    '#title' => (is_null($title)) ? t($field['widget']['label']) : $title,
    '#weight' => $field['widget']['weight'],
    '#default_value' => isset($phone) ? $phone : array(
      'country_code' => _world_phone_default_country_for_user($user),
      'value' => '',
    ),
    '#size' => isset($field['widget']['size']) ? $field['widget']['size'] : 20,
    '#required' => is_null($required) ? $field['required'] : $required,
  );
  return $form;
}


/**
 * Define a custom form element for world phone numbers: world_phone_number
 *
 * A user may add this element to any form. It accepts a #default_value (and
 * returns a value) which is an array with "country_code" and "value"
 * elements.  It may also be given #title, #size, #required, and
 * #country_options values (#country_options is a list of countries to provide
 * in the country-code dropdown)
 */

/**
 * Implementation of hook_elements().
 */
function world_phone_elements() {
  $type['world_phone_number'] = array(
    '#input' => TRUE,
    '#process' => array('world_phone_number_expand' => array()),
    '#validate' => array('world_phone_number_validate' => array()),
    '#default_value' => array(
      'country_code' => variable_get('world_phone_default_country_code', '1'),
      'value' => '',
    ),
  );
  return $type;
}

/**
 * Accept a world_phone_number form element and install two child elements in
 * the form: 'country_code' (a select menu) and 'value' (a textfield').
 *
 * This is a #process handler for world_phone_number form elements.
 */
function world_phone_number_expand($element) {
  global $user;
  $element['#tree'] = TRUE;
  if (! isset($element['#value'])) {
    $element['#value'] = array(
      'country_code' => $element['#default_value']['country_code'],
      'value' => $element['#default_value']['value'],
    );
  }
  if (isset($element['#country_options'])) {
    $country_options = $element['#country_options'];
  }
  else {
    $country_options = array('-1' => '') + _world_phone_country_list_for_select();
  }
  $element['country_code'] = array(
    '#type' => 'select',
    '#value' => $element['#value']['country_code'],
    '#options' => $country_options,
    '#attributes' => array('class' => 'wp-widget-country'),
    '#theme' => 'world_phone_country_select',
  );
  $element['value'] = array(
    '#type' => 'textfield',
    '#default_value' => $element['#value']['value'],
    '#required' => isset($element['#required']) ? $element['#required'] : FALSE,
    '#maxlength' => WORLD_PHONE_MAXLENGTH,
    '#size' => isset($element['#size']) ? $element['#size'] : 20,
    '#attributes' => array('class' => 'wp-widget-number'),
  );
  return $element;
}

/**
 * Validate a world_phone_number form element after submission.
 **/
function world_phone_number_validate($element) {
  if (! empty($element['#value']['value'])) {
    $validation = _world_phone_number_validate($element['#value']);
    foreach ($validation as $msg) {
      form_set_error(implode('][', $element['#parents']), $msg);
    }
  }
}

/**
 * Format a world_phone_number form element.
 *
 * @ingroup themeable
 **/
function theme_world_phone_number($element) {
  drupal_add_css(drupal_get_path('module', 'world_phone') . '/world_phone.css');
  // the javascript won't work without a newer version of jQuery
  if (module_exists('jquery_update')) {
    drupal_add_js(drupal_get_path('module', 'world_phone') . '/jquery.selectboxes.pack.js');
    drupal_add_js(drupal_get_path('module', 'world_phone') . '/world_phone.js');
  }
  $default_ccode = variable_get('world_phone_default_country_code', '1');
  drupal_add_js(array('world_phone_default_country_code' => $default_ccode), 'setting');

  $o = '<div class="wp-widget">';
  $required = !empty($element['#required']) ? '<span class="form-required" title="'. t('This field is required.') .'">*</span>' : '';
  if (!empty($element['#title'])) {
    $title = $element['#title'];
    $o .= ' <label>'. t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) ."</label>\n";
  }
  $o .= $element['#children'];
  if (!empty($element['#description'])) {
    $o .= ' <div class="description">'. $element['#description'] ."</div>\n";
  }
  $o .= '</div>';
  return $o;
}


/**
 * Return the default country code for the given user
 */
function _world_phone_default_country_for_user($user) {
  $country_field = variable_get('world_phone_user_country_field', NULL);
  $country_field_type = variable_get('world_phone_user_country_field_type', NULL);
  if ($country_field && $country_field_type && $country_field != '-1') {
    if ($country_field_type == 'phone') {
      $ccode = world_phone_country_code_from_number($user->$country_field);
      if (! empty($ccode)) {
        return $ccode;
      }
    }
    elseif ($country_field_type == 'abbrev') {
      $abbrev = $user->$country_field;
      if (! empty($abbrev)) {
        $ccode = world_phone_country_code_for_abbrev(strtoupper($abbrev));
        if (! empty($ccode)) {
          return $ccode;
        }
      }
    }
  }
  return variable_get('world_phone_default_country_code', '1');
}

/**
 * Determine if the $num_array represents a valid phone number. If the phone
 * number includes a country code and country-specific validation routines are
 * available for that country, those routines will be used for validiation.
 *
 * @param $num_array
 *   An array representing a phone number, with these keys:
 *     - 'value' => the number, as a string
 *     - 'country_code' => an explicitly specified country code. May be NULL.
 * @return
 *   TRUE if $num_array is a valid phone number, FALSE otherwise.
 */
function _world_phone_number_validate($num_array) {
  $result = array();
  $ccode = _world_phone_determine_country_code($num_array['value'], $num_array['country_code']);
  $policy = variable_get('world_phone_country_policy', 'use_site_default');
  if ($ccode['source'] == 'conflict') {
    $result[] = t('The phone number begins with a country code that disagrees with that selected in the pulldown menu.');
  }
  if ($ccode['source'] == 'default' && $policy == 'require') {
    $result[] = t('You must enter a country code for this phone number');
  }
  $hook_result = world_phone_country_invoke($ccode['value'], 'validate_number', $num_array['value'], $ccode['value']);
  if (! is_array($hook_result)) {
    // the country invocation failed for some reason.
    // we allow nothing but numbers, with optional dashes, parens, and spaces and an optional + in front
    if (! (preg_match('/^\s*\+?([-\s\)\(\d]+?)\s*$/', $num_array['value']))) {
      $result[] = t('Phone number contains an invalid character; ' .
                    'only digits, spaces, parentheses, dashes, and + are allowed.');
    }
    return $result;
  }
  return array_merge($result, $hook_result);
}

/**
 * Accepts a number and converts it to a canonical form to display to the
 * user. The output is checked using check_plain to be sure it is safe to show
 * the user.
 */
function world_phone_format_number($number, $country_code = NULL, $include_country_code = WORLD_PHONE_FORMAT_FOREIGN_COUNTRY_ONLY) {
  $ccode = _world_phone_determine_country_code($number, $country_code);
  $fmt_number = world_phone_country_invoke($ccode['value'], 'format_number', 
                                           $number, $ccode['value'], $include_country_code);
  if (! empty($fmt_number)) {
    return $fmt_number;
  }
  // the hook invocation failed, so handle this ourselves
  $fmt_number = $number;
  $src = $ccode['source'];
  switch ($include_country_code) {
    case WORLD_PHONE_FORMAT_WITH_COUNTRY:
      if ($src == 'default' || $src == 'country_code') {
        // add ccode to number
        $fmt_number = _world_phone_number_add_country_code($number, $ccode['value']);
      }
      break;
    case WORLD_PHONE_FORMAT_WITHOUT_COUNTRY:
      if ($src == 'number' || $src == 'conflict' || $src == 'redundant') {
        // remove ccode from number
        $fmt_number = _world_phone_number_remove_country_code($number);
      }
      break;
    default:
      $default_ccode = variable_get('world_phone_default_country_code', '1');
      if ($default_ccode == $ccode['value']) {
        $fmt_number = _world_phone_number_remove_country_code($number);
      }
      else {
        $fmt_number = _world_phone_number_add_country_code($number, $ccode['value']);
      }
      break;
  }
  return check_plain($fmt_number);
}

/**
 * Return TRUE if the given phone number begins with a '+', indicating that it
 * includes a country code.
 */
function _world_phone_number_has_intl_prefix($number) {
  return preg_match('/^\s*\+/', $number);
}

/**
 * Add the given $country_code to the front of the given $number string and return the resulting
 * string. If the number already has a country code, or $country_code is empty, return the number
 * without altering it.
 */
function _world_phone_number_add_country_code($number, $country_code) {
  if (_world_phone_number_has_intl_prefix($number) || empty($country_code) || empty($number)) {
    return $number;
  }
  return '+' . $country_code . ' ' . $number;
}

/**
 * Split the given string into 'country_code' and 'value' portions.  'value'
 * is what is left after the country code is removed. If no country code is
 * present in the string, country_code will be NULL. If no value is present,
 * value will be the empty string.
 */
// TODO: make this the primary function and make the others depend on it
function world_phone_parse_number_text($number) {
  return array(
    'country_code' => world_phone_country_code_from_number($number),
    'value' => _world_phone_number_remove_country_code($number),
  );
}

/**
 * Remove the country code from the start of the given $number and return the trimmed number.
 */
// TODO - rewrite this and the following function as cases of world_phone_parse_number_text
function _world_phone_number_remove_country_code($number) {
  if (! _world_phone_number_has_intl_prefix($number)) {
    return $number;
  }
  $ccode = world_phone_country_code_from_number($number);
  // remove digits from start of number until we've removed the whole country code
  $digits_removed = 0;
  for ($i = 0; $i < strlen($number); $i++) {
    $chr = substr($number, $i, 1);
    if (preg_match('/[0-9]/', $chr)) {
      $digits_removed++;
    }
    if ($digits_removed >= strlen($ccode)) {
      $trimmed = substr($number, $i + 1, strlen($number) - $i);
      // strip leading and trailing dashes, spaces, etc.
      $trimmed = trim($trimmed, ' -');
      return $trimmed;
    }
  }
  // we removed the whole number while trying to remove the country code.
  return '';
}

/**
 * Parse a string containing a phone number, extract the country code portion, and
 * return it.
 *
 * @param $number
 *   A string containing a phone number.
 * @param $require_prefix
 *   A Boolean. If TRUE, the $number must begin with a + or it will be assumed not to contain a country code.
 * @return
 *   A string containing a country code, or NULL if the country code cannot be identified. 
 */
function world_phone_country_code_from_number($number, $require_prefix = TRUE) {
  if ($require_prefix && (! _world_phone_number_has_intl_prefix($number))) {
    return NULL;
  }
  // strip everything but digits
  $n = preg_replace('/[^0-9]/', '', $number);
  // take the first few digits at a time and match against the phone codes.
  // see http://en.wikipedia.org/wiki/List_of_country_calling_codes for explanation of this algorithm
  $len = 1;
  $maxlen = (strlen($n) >= 3) ? 3 : strlen($n);
  for ($len = 1; $len <= $maxlen; $len++) {
    $ccode = substr($n, 0, $len);
    if (world_phone_country_code_exists($ccode) || $len == 3) {
      if ($ccode == '1') {
        // code 1 is special: it might be the start of a four-digit code
        $long_ccode = substr($n, 0, 4);
        if (world_phone_country_code_exists($long_ccode)) {
          return $long_ccode;
        }
      }
      return $ccode;
    }
  }
  return NULL;
}

/**
 * Given a phone number string (which may or may not include a country code
 * already) and, optionally, a separately-specified country code, determine
 * which country code should be used for the number and return an array of
 * information about it.
 *
 * @param $number
 *   A string containing a phone number, possibly with a country code included in the string.
 * @param $country_code
 *   (Optional) A country code. This may be used for the number if the number doesn't already
 *   include one.
 * @return
 *   An array specifying the country code that should be used, and how it was determined.
 *   Array keys:
 *   - value: The country code itself.
 *   - source: A string indicating how the 'value' was determined. May be one of the
 *     following strings:
 *     - 'redundant': The number includes a country code which matches the
 *        specified $country_code argument.
 *     - 'conflict': The number's country code disagrees with the specified
 *        $country_code argument, so the number's country code was assumed to be correct.
 *     - 'number': The number includes a country code and no $country_code argument was
 *        provided, so the number's code was used.
 *     - 'country_code': The number does not include a country code, so the $country_code
 *        argument was used.
 *     - 'default': The number contains no country code and no $country_code argument was
 *        provided, so the sitewide default country code was used.
 */
function _world_phone_determine_country_code($number, $country_code = NULL) {
  $number_ccode = world_phone_country_code_from_number($number);
  if ($number_ccode && (! empty($country_code)) && $country_code == $number_ccode) {
    return array(
      'value' => $number_ccode,
      'source' => 'redundant',
    );
  }
  if ($number_ccode && (! empty($country_code)) && ($country_code != '-1')) {
    return array(
      'value' => $number_ccode,
      'source' => 'conflict',
    );
  }
  if ($number_ccode) {
    return array(
      'value' => $number_ccode,
      'source' => 'number',
    );
  }
  if (empty($country_code) || $country_code == '-1') {
    return array(
      'value' => variable_get('world_phone_default_country_code', '1'),
      'source' => 'default',
    );
  }
  return array(
    'value' => $country_code,
    'source' => 'country_code',
  );
}

/**
 *  Return a dialable version of the given number with the given country code.
 *
 *  @param $number
 *    The number to dial.
 *
 *  @param $country_code
 *    The country code to add to the $number. If the $number already begins
 *    with + and includes a country code, this argument will be ignored.
 *
 * @param $from_country 
 *   Optional: the telephone country code of the country that we are dialing
 *   out from. If this is not provided or is NULL, no dial-out prefix will be
 *   added; otherwise the module will attempt to add the appropriate
 *   international dial-out prefix to the number. (By default, this will be
 *   00, which is according to ITU standards. But there are many
 *   country-by-country exceptions; see
 *   http://en.wikipedia.org/wiki/List_of_international_call_prefixes . If
 *   this function does not work for your specific country you may need to
 *   write a hook.)  TODO: better documentation of this hook name
 *
 * @param $addl_args
 *   Optional: An array of additional arguments to pass to the
 *   country-specific formatter specified by $from_country. This may include,
 *   e.g., the local area code/numbering exchange of the phone we intend to
 *   dial out from.
 */
function world_phone_number_to_dial($number, $country_code = NULL, $from_country = NULL, $addl_args = array()) {
  if ($from_country) {
    $to_dial = world_phone_country_invoke($from_country, 'number_to_dial', $number, $country_code, $addl_args);
    if ($to_dial) {
      return $to_dial;
    }
  }
  $ccode = _world_phone_determine_country_code($number, $country_code);
  $to_dial = _world_phone_number_add_country_code($number, $ccode['value']);
  // remove all non-digits
  return preg_replace('/[^0-9]/', '', $to_dial);
}

/*
 * HOOK MECHANISM
 *
 * A pluggable infrastructure that allows other modules to define how a
 * specific country's phone numbers are handled: How they are formatted, how
 * to validate them, and how to dial out internationally from that country's
 * phones.
 *
 * This module defines default behavior for most countries, and may eventually
 * come to define more specialized behaviors for certain popular countries, but
 * anyone whose needs are not met by this module can implement some hooks to
 * add their own desired behaviors.
 * Third-party modules can define how a country's phone numbers should be
 * handled by implementing one or more world_phone hooks, and then registering
 * to handle a particular country by implementing hook_world_phone_countries().
 */

/**
 * Invoke a hook that's associated with a given country.
 *
 * @param $country_code
 *   The telephone country code
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...Arguments to pass to the hook
 */
function world_phone_country_invoke() {
  $args = func_get_args();
  $ccode = array_shift($args);
  $hook = array_shift($args);

  // TODO - make the hook mechanism real
  $func = 'world_phone_default_' . $hook;
  if (function_exists($func)) {
    return call_user_func_array($func, $args);
  }  
}

/**
 * Implementation of hook_format_number().
 *
 * Accept a phone number and convert it to a canonical form to display to the
 * user. The output is checked using check_plain to be sure it is safe to show
 * the user.
 */
function world_phone_default_format_number($number, $country_code = NULL, $include_country_code = TRUE) {
  // return a blank value, to force the module to handle this using its default code
  return '';
}

/**
 * Implementation of hook_validate_number()
 *
 * Accept a number as entered by the user and return an array of error
 * messages if that number is not valid. If the number is valid, return an empty array.
 *
 * Note that unless it begins with '+' the $number may not contain a country
 * code -- the user may have specified the country code by some other means.
 * 
 **/
function world_phone_default_validate_number($number, $country_code) {
  // we allow nothing but numbers, with optional dashes, parens, and spaces and an optional + in front
  if (! (preg_match('/^\s*\+?([-\s\)\(\d]+?)\s*$/', $number))) {
    return array(t('Phone number contains an invalid character; only digits and + are allowed.'));
  }
  return array();
}

/**
 * COUNTRY CODES, ABBREVIATIONS, AND NAMES
 */
 
/**
 * Return a map of telephone country codes to ISO 3166-1-alpha-2
 * abbreviations.
 */
function world_phone_country_code_to_abbrev_map() {
  // This just wraps the map from the include file.
  $path = drupal_get_path('module', 'world_phone');
  require_once("./$path/country_codes.inc");
  return _world_phone_country_code_to_abbrev_map();
}

/**
 * Given a telephone country code, return the ISO 3166-1-alpha-2 abbreviation
 * for the corresponding country.
 *
 * Note that there is at least one important case (Canada and the USA) where
 * two countries share the same telephone country code. In this case, this
 * routine will return 'US'.
 * 
 * @param $ccode
 *   A string representing a telephone country code.
 * @return
 *   The ISO 3166-1-alpha-2 abbreviation for the country corresponding to the
 *   given country code, or NULL if the country code does not correspond to a
 *   country.
 */
function world_phone_country_abbrev_for_code($ccode) {
  $map = world_phone_country_code_to_abbrev_map();
  if (isset($map[$ccode])) {
    return $map[$ccode];
  }
  return NULL;
}

/**
 * Return TRUE if the given telephone country code is known to correspond to
 * an actual country, false otherwise.
 *
 * @param $ccode
 *   A string representing a possible telephone country code.
 * @return
 *   TRUE if $ccode exists in the database of telephone country codes, FALSE
 *   otherwise.
 */
function world_phone_country_code_exists($ccode) {
  return (world_phone_country_abbrev_for_code($ccode) !== NULL) ? TRUE : FALSE;
}

/**
 * Given an ISO 3166-1-alpha-2 abbreviation for a country of the world, return
 * the telephone country code for that country.
 *
 * @param $iso
 *   A string representing the two-character ISO 3166-1-alpha-2 code for a
 *   country.
 * @return
 *   The telephone country code for the given country.
 */
function world_phone_country_code_for_abbrev($iso) {
  static $cached_map;
  if (! isset($cached_map)) {
    $cached_map = array_flip(world_phone_country_code_to_abbrev_map());    
  }
  if (isset($cached_map[$iso])) {
    return $cached_map[$iso];
  }
  return NULL;
}


/**
 * COUNTRY SELECTION WIDGET
 */

/**
 * Return a list of country names in proper format for a phone widget
 * dropdown: keyed by telephone country code, sorted alphabetically by name,
 * and themed with the 'world_phone_country_for_widget' theme.
 */
function _world_phone_country_list_for_select() {
  if ($names = cache_get('world_phone_country_list_for_select')) {
    return unserialize($names->data);
  }
  $path = drupal_get_path('module', 'world_phone');
  require_once("./$path/country_short_names.inc");
  $shortnames = _world_phone_country_abbrev_to_shortname_map();
  
  // for each country code, format a menu item for the corresponding country
  $ccodes = world_phone_country_code_to_abbrev_map();
  $by_name = array();
  foreach ($ccodes as $country_code => $abbrev) {
    if (isset($shortnames[$abbrev])) {
      $shortname = $shortnames[$abbrev];
      if (! isset($by_name[$shortname])) {
        $by_name[$shortname] = array(
          $country_code,
          theme('world_phone_country_for_widget', $abbrev, $shortname, $country_code),
        );
      }
    }
  }
  // sort entries by name
  ksort($by_name);
  // reformat the entries so they are keyed by country code
  $names = array();
  foreach ($by_name as $name_info) {
    $names[$name_info[0]] = $name_info[1];
  }
  cache_set('world_phone_country_list_for_select', 'cache', serialize($names));
  return $names;
}

/**
 * Format a row for the options list that is used to select countries for a
 * phone number.
 *
 * @param $abbrev
 *   The country's ISO 3166 two-letter country abbreviation.
 * @param $name
 *   The country's short name.
 * @param $code
 *   The country's telephone country code.
 *
 * @ingroup themeable
 */
function theme_world_phone_country_for_widget($abbrev, $name, $code) {  
  return str_repeat('&nbsp', 4 - strlen($code)) . '+' . $code . '&nbsp;&nbsp;' . $name;
}

/**
 * Format the country select list for phone numbers.
 *
 * We need this special version of theme_select from Drupal core to prevent
 * Drupal from helpfully stripping out the &nbsp; encodings that we use to
 * line up the columns in the dropdown. This is just like the core version,
 * but calls our own version of form_select_options.
 *
 * @ingroup themeable
 */
function theme_world_phone_country_select($element) {
  $select = '';
  $size = $element['#size'] ? ' size="' . $element['#size'] . '"' : '';
  _form_set_class($element, array('form-select'));
  $multiple = isset($element['#multiple']) && $element['#multiple'];
  return theme('form_element', $element, '<select name="'. $element['#name'] .''. ($multiple ? '[]' : '') .'"'. ($multiple ? ' multiple="multiple" ' : '') . drupal_attributes($element['#attributes']) .' id="'. $element['#id'] .'" '. $size .'>'. _world_phone_country_form_select_options($element) .'</select>');
}

/**
 * Duplicate of form_select_options from core, with one tiny change to remove
 * a check_plain in the final line.
 */
function _world_phone_country_form_select_options($element, $choices = NULL) {
  if (!isset($choices)) {
    $choices = $element['#options'];
  }
  // array_key_exists() accommodates the rare event where $element['#value'] is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = is_array($element['#value']);
  $options = '';
  foreach ($choices as $key => $choice) {
    if (is_array($choice)) {
      $options .= '<optgroup label="'. $key .'">';
      $options .= form_select_options($element, $choice);
      $options .= '</optgroup>';
    }
    elseif (is_object($choice)) {
      $options .= form_select_options($element, $choice->option);
    }
    else {
      $key = (string)$key;
      if ($value_valid && (!$value_is_array && (string)$element['#value'] === $key || ($value_is_array && in_array($key, $element['#value'])))) {
        $selected = ' selected="selected"';
      }
      else {
        $selected = '';
      }
      $options .= '<option value="'. check_plain($key) .'"'. $selected .'>'. $choice .'</option>';
    }
  }
  return $options;
}